/* tslint:disable */
/* eslint-disable */
/**
 * PupiBot Agent Runner API
 * API para gestión y ejecución de operaciones por agentes
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ExecuteRequest
 */
export interface ExecuteRequest {
    /**
     * 
     * @type {any}
     * @memberof ExecuteRequest
     */
    'action': any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ExecuteRequest
     */
    'payload': { [key: string]: any; };
    /**
     * 
     * @type {any}
     * @memberof ExecuteRequest
     */
    'idempotency_key': any;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {any}
     * @memberof HTTPValidationError
     */
    'detail'?: any;
}
/**
 * 
 * @export
 * @interface Operation
 */
export interface Operation {
    /**
     * ID único de la operación
     * @type {any}
     * @memberof Operation
     */
    'id': any;
    /**
     * Tipo de acción que ejecuta la operación
     * @type {any}
     * @memberof Operation
     */
    'action': any;
    /**
     * Datos asociados a la operación
     * @type {any}
     * @memberof Operation
     */
    'payload'?: any;
    /**
     * Estado actual de la operación
     * @type {any}
     * @memberof Operation
     */
    'status'?: any;
    /**
     * Resultado de la operación
     * @type {any}
     * @memberof Operation
     */
    'result'?: any;
}
/**
 * 
 * @export
 * @interface OperationIn
 */
export interface OperationIn {
    /**
     * 
     * @type {any}
     * @memberof OperationIn
     */
    'action': any;
    /**
     * 
     * @type {any}
     * @memberof OperationIn
     */
    'payload': any;
    /**
     * 
     * @type {any}
     * @memberof OperationIn
     */
    'idempotency_key'?: any;
}
/**
 * 
 * @export
 * @interface OperationResponse
 */
export interface OperationResponse {
    /**
     * 
     * @type {any}
     * @memberof OperationResponse
     */
    'operation_id': any;
}
/**
 * 
 * @export
 * @interface OperationStatus
 */
export interface OperationStatus {
    /**
     * 
     * @type {any}
     * @memberof OperationStatus
     */
    'operation_id': any;
    /**
     * 
     * @type {any}
     * @memberof OperationStatus
     */
    'status': any;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {any}
     * @memberof ValidationError
     */
    'loc': any;
    /**
     * 
     * @type {any}
     * @memberof ValidationError
     */
    'msg': any;
    /**
     * 
     * @type {any}
     * @memberof ValidationError
     */
    'type': any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new operation with the provided action and payload.
         * @summary Create a new operation
         * @param {OperationIn} operationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperationOperationsPost: async (operationIn: OperationIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationIn' is not null or undefined
            assertParamExists('createOperationOperationsPost', 'operationIn', operationIn)
            const localVarPath = `/operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(operationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute Action
         * @param {ExecuteRequest} executeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeActionV1AgentExecutePost: async (executeRequest: ExecuteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'executeRequest' is not null or undefined
            assertParamExists('executeActionV1AgentExecutePost', 'executeRequest', executeRequest)
            const localVarPath = `/v1/agent/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Operation Status
         * @param {any} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationStatusV1AgentOperationsOperationIdGet: async (operationId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('getOperationStatusV1AgentOperationsOperationIdGet', 'operationId', operationId)
            const localVarPath = `/v1/agent/operations/{operation_id}`
                .replace(`{${"operation_id"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Executes the specified operation and updates its status.
         * @summary Run an operation
         * @param {any} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOperationOperationsOperationIdRunPost: async (operationId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('runOperationOperationsOperationIdRunPost', 'operationId', operationId)
            const localVarPath = `/operations/{operation_id}/run`
                .replace(`{${"operation_id"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new operation with the provided action and payload.
         * @summary Create a new operation
         * @param {OperationIn} operationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOperationOperationsPost(operationIn: OperationIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Operation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOperationOperationsPost(operationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Execute Action
         * @param {ExecuteRequest} executeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeActionV1AgentExecutePost(executeRequest: ExecuteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeActionV1AgentExecutePost(executeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Operation Status
         * @param {any} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperationStatusV1AgentOperationsOperationIdGet(operationId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperationStatusV1AgentOperationsOperationIdGet(operationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Executes the specified operation and updates its status.
         * @summary Run an operation
         * @param {any} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runOperationOperationsOperationIdRunPost(operationId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Operation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runOperationOperationsOperationIdRunPost(operationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Creates a new operation with the provided action and payload.
         * @summary Create a new operation
         * @param {OperationIn} operationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperationOperationsPost(operationIn: OperationIn, options?: any): AxiosPromise<Operation> {
            return localVarFp.createOperationOperationsPost(operationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute Action
         * @param {ExecuteRequest} executeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeActionV1AgentExecutePost(executeRequest: ExecuteRequest, options?: any): AxiosPromise<OperationResponse> {
            return localVarFp.executeActionV1AgentExecutePost(executeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Operation Status
         * @param {any} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationStatusV1AgentOperationsOperationIdGet(operationId: any, options?: any): AxiosPromise<OperationStatus> {
            return localVarFp.getOperationStatusV1AgentOperationsOperationIdGet(operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: any): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Executes the specified operation and updates its status.
         * @summary Run an operation
         * @param {any} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOperationOperationsOperationIdRunPost(operationId: any, options?: any): AxiosPromise<Operation> {
            return localVarFp.runOperationOperationsOperationIdRunPost(operationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new operation with the provided action and payload.
     * @summary Create a new operation
     * @param {OperationIn} operationIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createOperationOperationsPost(operationIn: OperationIn, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createOperationOperationsPost(operationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute Action
     * @param {ExecuteRequest} executeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public executeActionV1AgentExecutePost(executeRequest: ExecuteRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).executeActionV1AgentExecutePost(executeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Operation Status
     * @param {any} operationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOperationStatusV1AgentOperationsOperationIdGet(operationId: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOperationStatusV1AgentOperationsOperationIdGet(operationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckHealthGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Executes the specified operation and updates its status.
     * @summary Run an operation
     * @param {any} operationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runOperationOperationsOperationIdRunPost(operationId: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).runOperationOperationsOperationIdRunPost(operationId, options).then((request) => request(this.axios, this.basePath));
    }
}


